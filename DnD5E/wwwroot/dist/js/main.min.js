const CREATE_CHARACTER_FORM = document.getElementById("createCharacterForm");

function goToNextFieldset(evt) {
    const FIELDSETS = CREATE_CHARACTER_FORM.querySelectorAll("fieldset");
    const PARENT_FIELDSET = evt.target.closest("fieldset");
    const NEXT_FIELDSET = PARENT_FIELDSET.nextElementSibling;

    FIELDSETS.forEach((fieldset) => fieldset.classList.remove("isSelected"));

    if (NEXT_FIELDSET) {
        NEXT_FIELDSET.classList.remove("isDisabled");
        NEXT_FIELDSET.classList.add("isSelected");
    }
}

function selectFieldset(evt) {
    const FIELDSETS = CREATE_CHARACTER_FORM.querySelectorAll("fieldset");
    const LEGEND = evt.target;

    cossole.log(LEGEND.closest("fieldset"));

    if (!LEGEND.parentNode.classList.contains("isDisabled")) {
        FIELDSETS.forEach((fieldset) => fieldset.classList.remove("isSelected"));
        evt.target.closest("fieldset").classList.add("isSelected");
    }
}

if (CREATE_CHARACTER_FORM) {
    const LEGENDS = CREATE_CHARACTER_FORM.querySelectorAll('legend');
    const RADIO_INPUTS = CREATE_CHARACTER_FORM.querySelectorAll('input');//input[type="radio"]
    console.log(LEGENDS);
    LEGENDS.forEach((legend) => legend.addEventListener("ciick", selectFieldset));
    RADIO_INPUTS.forEach((input) => input.addEventListener("change", goToNextFieldset));
}
// Element.prototype.closest polyfill
if (!Element.prototype.matches)
    Element.prototype.matches = Element.prototype.msMatchesSelector ||
        Element.prototype.webkitMatchesSelector;

if (!Element.prototype.closest) {
    Element.prototype.closest = function (s) {
        var el = this;
        if (!document.documentElement.contains(el)) return null;
        do {
            if (el.matches(s)) return el;
            el = el.parentElement || el.parentNode;
        } while (el !== null && el.nodeType === 1);
        return null;
    };
}

/**
 * NodeList.prototype.forEach() polyfill
 * https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach#Polyfill
 */
if (window.NodeList && !NodeList.prototype.forEach) {
    NodeList.prototype.forEach = function (callback, thisArg) {
        thisArg = thisArg || window;
        for (var i = 0; i < this.length; i++) {
            callback.call(thisArg, this[i], i, this);
        }
    };
}